#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1436573785.92562
__CHEETAH_genTimestamp__ = 'Fri Jul 10 19:16:25 2015'
__CHEETAH_src__ = '/home/jeb/Repositores/krpci/src/templates/krpci_hpp.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Jul 10 18:38:45 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class krpci_hpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(krpci_hpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 1, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 1, col 1.
        write(u''' <iostream>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 2, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 2, col 1.
        write(u''' <fstream>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 3, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 3, col 1.
        write(u''' <string>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 4, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 4, col 1.
        write(u''' <sys/types.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 5, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 5, col 1.
        write(u''' <sys/stat.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 6, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 6, col 1.
        write(u''' <fcntl.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 7, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 7, col 1.
        write(u''' "KRPC.pb.h"
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 8, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 8, col 1.
        write(u''' "/usr/include/google/protobuf/io/zero_copy_stream.h"
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 9, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 9, col 1.
        write(u''' "/usr/include/google/protobuf/io/zero_copy_stream_impl.h"
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 10, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 10, col 1.
        write(u''' "/usr/include/google/protobuf/io/coded_stream.h"
using namespace google::protobuf::io;
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 12, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 12, col 1.
        write(u''' <boost/thread.hpp>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 13, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 13, col 1.
        write(u''' <stdio.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 14, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 14, col 1.
        write(u''' <stdlib.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 15, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 15, col 1.
        write(u''' <sys/types.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 16, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 16, col 1.
        write(u''' <sys/socket.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 17, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 17, col 1.
        write(u''' <stdio.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 18, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 18, col 1.
        write(u''' <stdlib.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 19, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 19, col 1.
        write(u''' <unistd.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 20, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 20, col 1.
        write(u''' <string.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 21, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 21, col 1.
        write(u''' <arpa/inet.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 22, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 22, col 1.
        write(u''' <errno.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 23, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 23, col 1.
        write(u''' <netinet/in.h>
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 24, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 24, col 1.
        write(u''' <ifaddrs.h>

const int maxBufferSize = 65535;
const char helloMessage[] = { 0x48, 0x45, 0x4C, 0x4C, 0x4F, 0x2D, 0x52, 0x50, 0x43, 0x00, 0x00, 0x00 };
const char helloStreamMessage[] = { 0x48, 0x45, 0x4C, 0x4C, 0x4F, 0x2D, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4D };
const char streamAck[] = { 0x4F, 0x4B };

struct KRPC_Stream
{
public:
  KRPC_Stream(std::string name_, uint64_t id_, krpc::Request req, boost::function<void (krpc::Response&)> fptr_) : name(name_), id(id_), request(req), fptr(fptr_) {}

  KRPC_Stream(const KRPC_Stream& other)
    : name(other.name),
      id(other.id),
      request(other.request),
      response(other.response)
  {
  }

  std::string name;
  uint64_t id;
  krpc::Request request;  
  boost::function<void (krpc::Response&)> fptr;
  krpc::Response response;
};

class KRPCI
{
public:
  KRPCI(std::string name="localClient", std::string ip="127.0.0.1", int port=50000, int streamPort=50001);
  ~KRPCI();

  bool Connect();
  bool Close();

  void SetName(std::string name);
  void SetIP(std::string ip);
  void SetPort(int port);
  void SetStreamPort(int streamPort);

  // UTILITY FUNCTIONS
  static void PrintBytesHex(const char *buf, int size);
  static void EncodeVarint(uint32_t value, char *buf, int &size);
  static void EncodeVarint(uint64_t value, char *buf, int &size);
  static void DecodeVarint(uint32_t &value, char *buf, int size);
  static void DecodeVarint(uint64_t &value, char *buf, int size);
  static void DecodeString(std::string &str, char *buf, int size);
  static void EncodeTuple(double x, double y, double z, krpc::Tuple &tuple);
  static void DecodeTuple(krpc::Tuple tuple, double &x, double &y, double &z);

  bool CreateStream(std::string streamName, krpc::Request req, boost::function<void (krpc::Response&)> fptr);
  bool RemoveStream(std::string streamName);
  bool GetLatestStreamData(std::string streamName, krpc::Response& res);
''')
        if VFFSL(SL,"services",True) != []: # generated from line 78, col 1
            for service in VFFSL(SL,"services",True): # generated from line 79, col 1
                if VFFSL(SL,"service.procedures",True) != []: # generated from line 80, col 1
                    for procedure in VFFSL(SL,"service.procedures",True): # generated from line 81, col 1
                        if VFFSL(SL,"procedure.parameters",True) != []: # generated from line 82, col 1
                            write(u'''  static bool ''')
                            _v = VFFSL(SL,"procedure.name",True) # u'${procedure.name}' on line 83, col 15
                            if _v is not None: write(_filter(_v, rawExpr=u'${procedure.name}')) # from line 83, col 15.
                            write(u'''_createRequest(''')
                            _v = VFFSL(SL,"procedure.input_args",True) # u'${procedure.input_args}' on line 83, col 47
                            if _v is not None: write(_filter(_v, rawExpr=u'${procedure.input_args}')) # from line 83, col 47.
                            write(u''', krpc::Request& request);
''')
                        else: # generated from line 84, col 1
                            write(u'''  static bool ''')
                            _v = VFFSL(SL,"procedure.name",True) # u'${procedure.name}' on line 85, col 15
                            if _v is not None: write(_filter(_v, rawExpr=u'${procedure.name}')) # from line 85, col 15.
                            write(u'''_createRequest(krpc::Request& request);
''')
                        write(u'''  bool ''')
                        _v = VFFSL(SL,"procedure.name",True) # u'${procedure.name}' on line 87, col 8
                        if _v is not None: write(_filter(_v, rawExpr=u'${procedure.name}')) # from line 87, col 8.
                        write(u'''(''')
                        _v = VFFSL(SL,"procedure.args",True) # u'${procedure.args}' on line 87, col 26
                        if _v is not None: write(_filter(_v, rawExpr=u'${procedure.args}')) # from line 87, col 26.
                        write(u''');
''')
                        if VFFSL(SL,"procedure.output_args",True) != "": # generated from line 88, col 1
                            write(u'''  static bool ''')
                            _v = VFFSL(SL,"procedure.name",True) # u'${procedure.name}' on line 89, col 15
                            if _v is not None: write(_filter(_v, rawExpr=u'${procedure.name}')) # from line 89, col 15.
                            write(u'''_parseResponse(krpc::Response response, ''')
                            _v = VFFSL(SL,"procedure.output_args",True) # u'${procedure.output_args}' on line 89, col 72
                            if _v is not None: write(_filter(_v, rawExpr=u'${procedure.output_args}')) # from line 89, col 72.
                            write(u''');
''')
        write(u'''protected:
  bool createRequestString(krpc::Request req, std::string& str);
  bool getResponseFromRequest(krpc::Request req, krpc::Response& res);
  bool getStreamResponsesFromStreamMessage();
  void streamThreadFunc();
private:
  std::map<std::string,KRPC_Stream*> active_streams_;
  std::map<uint64_t,KRPC_Stream*> id_to_stream_map_;

  int port_;
  int streamPort_;
  std::string ip_;
  std::string id_;
  std::string name_;
  int socket_;
  int streamSocket_;
  int timeout_;

  bool connected_;
};
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_krpci_hpp= 'respond'

## END CLASS DEFINITION

if not hasattr(krpci_hpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(krpci_hpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(krpci_hpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=krpci_hpp()).run()


