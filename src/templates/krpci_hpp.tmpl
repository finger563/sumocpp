$hash_include <iostream>
$hash_include <fstream>
$hash_include <string>
$hash_include <sys/types.h>
$hash_include <sys/stat.h>
$hash_include <fcntl.h>
$hash_include "KRPC.pb.h"
$hash_include "/usr/include/google/protobuf/io/zero_copy_stream.h"
$hash_include "/usr/include/google/protobuf/io/zero_copy_stream_impl.h"
$hash_include "/usr/include/google/protobuf/io/coded_stream.h"
using namespace google::protobuf::io;
$hash_include <boost/thread.hpp>
$hash_include <stdio.h>
$hash_include <stdlib.h>
$hash_include <sys/types.h>
$hash_include <sys/socket.h>
$hash_include <stdio.h>
$hash_include <stdlib.h>
$hash_include <unistd.h>
$hash_include <string.h>
$hash_include <arpa/inet.h>
$hash_include <errno.h>
$hash_include <netinet/in.h>
$hash_include <ifaddrs.h>

const int maxBufferSize = 65535;
const char helloMessage[] = { 0x48, 0x45, 0x4C, 0x4C, 0x4F, 0x2D, 0x52, 0x50, 0x43, 0x00, 0x00, 0x00 };
const char helloStreamMessage[] = { 0x48, 0x45, 0x4C, 0x4C, 0x4F, 0x2D, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4D };
const char streamAck[] = { 0x4F, 0x4B };

struct KRPC_Stream
{
public:
  KRPC_Stream(std::string name_, uint64_t id_, krpc::Request req, boost::function<void (krpc::Response&)> fptr_) : name(name_), id(id_), request(req), fptr(fptr_) {}

  KRPC_Stream(const KRPC_Stream& other)
    : name(other.name),
      id(other.id),
      request(other.request),
      response(other.response)
  {
  }

  std::string name;
  uint64_t id;
  krpc::Request request;  
  boost::function<void (krpc::Response&)> fptr;
  krpc::Response response;
};

class KRPCI
{
public:
  KRPCI(std::string name="localClient", std::string ip="127.0.0.1", int port=50000, int streamPort=50001);
  ~KRPCI();

  bool Connect();
  bool Close();

  void SetName(std::string name);
  void SetIP(std::string ip);
  void SetPort(int port);
  void SetStreamPort(int streamPort);

  // UTILITY FUNCTIONS
  static void PrintBytesHex(const char *buf, int size);
  static void EncodeVarint(uint32_t value, char *buf, int &size);
  static void EncodeVarint(uint64_t value, char *buf, int &size);
  static void DecodeVarint(uint32_t &value, char *buf, int size);
  static void DecodeVarint(uint64_t &value, char *buf, int size);
  static void DecodeString(std::string &str, char *buf, int size);
  static void EncodeTuple(double x, double y, double z, krpc::Tuple &tuple);
  static void DecodeTuple(krpc::Tuple tuple, double &x, double &y, double &z);

  bool CreateStream(std::string streamName, krpc::Request req, boost::function<void (krpc::Response&)> fptr);
  bool RemoveStream(std::string streamName);
  bool GetLatestStreamData(std::string streamName, krpc::Response& res);
#if $services != []
#for $service in $services
#if $service.procedures != []
#for $procedure in $service.procedures
#if $procedure.parameters != []
  static bool ${procedure.name}_createRequest(${procedure.input_args}, krpc::Request& request);
#else
  static bool ${procedure.name}_createRequest(krpc::Request& request);
#end if 
  bool ${procedure.name}(${procedure.args});
#if $procedure.output_args != ""
  static bool ${procedure.name}_parseResponse(krpc::Response response, ${procedure.output_args});
#end if
#end for
#end if
#end for
#end if
protected:
  bool createRequestString(krpc::Request req, std::string& str);
  bool getResponseFromRequest(krpc::Request req, krpc::Response& res);
  bool getStreamResponsesFromStreamMessage();
  void streamThreadFunc();
private:
  std::map<std::string,KRPC_Stream*> active_streams_;
  std::map<uint64_t,KRPC_Stream*> id_to_stream_map_;

  int port_;
  int streamPort_;
  std::string ip_;
  std::string id_;
  std::string name_;
  int socket_;
  int streamSocket_;
  int timeout_;

  bool connected_;
};
