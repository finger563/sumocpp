// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KRPC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "krpci/KRPC.pb.h"

#include <algorithm>

#include "/usr/include/google/protobuf/stubs/common.h"
#include "/usr/include/google/protobuf/stubs/once.h"
#include "/usr/include/google/protobuf/io/coded_stream.h"
#include "/usr/include/google/protobuf/wire_format_lite_inl.h"
#include "/usr/include/google/protobuf/descriptor.h"
#include "/usr/include/google/protobuf/generated_message_reflection.h"
#include "/usr/include/google/protobuf/reflection_ops.h"
#include "/usr/include/google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

namespace krpc {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Argument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Argument_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Services_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Services_reflection_ = NULL;
const ::google::protobuf::Descriptor* Service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_reflection_ = NULL;
const ::google::protobuf::Descriptor* Procedure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Procedure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Class_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Class_reflection_ = NULL;
const ::google::protobuf::Descriptor* Enumeration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Enumeration_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnumerationValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnumerationValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  List_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* DictionaryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictionaryEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Set_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KRPC_2eproto() {
  protobuf_AddDesc_KRPC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KRPC.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, procedure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, arguments_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Argument_descriptor_ = file->message_type(1);
  static const int Argument_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, value_),
  };
  Argument_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Argument_descriptor_,
      Argument::default_instance_,
      Argument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _has_bits_[0]),
      -1,
      -1,
      sizeof(Argument),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, return_value_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
  StreamMessage_descriptor_ = file->message_type(3);
  static const int StreamMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, responses_),
  };
  StreamMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamMessage_descriptor_,
      StreamMessage::default_instance_,
      StreamMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreamMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, _internal_metadata_),
      -1);
  StreamResponse_descriptor_ = file->message_type(4);
  static const int StreamResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamResponse, response_),
  };
  StreamResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamResponse_descriptor_,
      StreamResponse::default_instance_,
      StreamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreamResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamResponse, _internal_metadata_),
      -1);
  Services_descriptor_ = file->message_type(5);
  static const int Services_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Services, services_),
  };
  Services_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Services_descriptor_,
      Services::default_instance_,
      Services_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Services, _has_bits_[0]),
      -1,
      -1,
      sizeof(Services),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Services, _internal_metadata_),
      -1);
  Service_descriptor_ = file->message_type(6);
  static const int Service_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, procedures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, enumerations_),
  };
  Service_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Service_descriptor_,
      Service::default_instance_,
      Service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _has_bits_[0]),
      -1,
      -1,
      sizeof(Service),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _internal_metadata_),
      -1);
  Procedure_descriptor_ = file->message_type(7);
  static const int Procedure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, return_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, attributes_),
  };
  Procedure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Procedure_descriptor_,
      Procedure::default_instance_,
      Procedure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, _has_bits_[0]),
      -1,
      -1,
      sizeof(Procedure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Procedure, _internal_metadata_),
      -1);
  Parameter_descriptor_ = file->message_type(8);
  static const int Parameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, default_argument_),
  };
  Parameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(Parameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _internal_metadata_),
      -1);
  Class_descriptor_ = file->message_type(9);
  static const int Class_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, name_),
  };
  Class_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Class_descriptor_,
      Class::default_instance_,
      Class_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, _has_bits_[0]),
      -1,
      -1,
      sizeof(Class),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, _internal_metadata_),
      -1);
  Enumeration_descriptor_ = file->message_type(10);
  static const int Enumeration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enumeration, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enumeration, values_),
  };
  Enumeration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Enumeration_descriptor_,
      Enumeration::default_instance_,
      Enumeration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enumeration, _has_bits_[0]),
      -1,
      -1,
      sizeof(Enumeration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enumeration, _internal_metadata_),
      -1);
  EnumerationValue_descriptor_ = file->message_type(11);
  static const int EnumerationValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumerationValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumerationValue, value_),
  };
  EnumerationValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnumerationValue_descriptor_,
      EnumerationValue::default_instance_,
      EnumerationValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumerationValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(EnumerationValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumerationValue, _internal_metadata_),
      -1);
  List_descriptor_ = file->message_type(12);
  static const int List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, items_),
  };
  List_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      List_descriptor_,
      List::default_instance_,
      List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, _has_bits_[0]),
      -1,
      -1,
      sizeof(List),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(List, _internal_metadata_),
      -1);
  Dictionary_descriptor_ = file->message_type(13);
  static const int Dictionary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, entries_),
  };
  Dictionary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Dictionary_descriptor_,
      Dictionary::default_instance_,
      Dictionary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, _has_bits_[0]),
      -1,
      -1,
      sizeof(Dictionary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dictionary, _internal_metadata_),
      -1);
  DictionaryEntry_descriptor_ = file->message_type(14);
  static const int DictionaryEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, value_),
  };
  DictionaryEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DictionaryEntry_descriptor_,
      DictionaryEntry::default_instance_,
      DictionaryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(DictionaryEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, _internal_metadata_),
      -1);
  Set_descriptor_ = file->message_type(15);
  static const int Set_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, items_),
  };
  Set_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Set_descriptor_,
      Set::default_instance_,
      Set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _has_bits_[0]),
      -1,
      -1,
      sizeof(Set),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _internal_metadata_),
      -1);
  Tuple_descriptor_ = file->message_type(16);
  static const int Tuple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, items_),
  };
  Tuple_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tuple_descriptor_,
      Tuple::default_instance_,
      Tuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _has_bits_[0]),
      -1,
      -1,
      sizeof(Tuple),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _internal_metadata_),
      -1);
  Status_descriptor_ = file->message_type(17);
  static const int Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, version_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KRPC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Argument_descriptor_, &Argument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamMessage_descriptor_, &StreamMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamResponse_descriptor_, &StreamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Services_descriptor_, &Services::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Service_descriptor_, &Service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Procedure_descriptor_, &Procedure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Parameter_descriptor_, &Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Class_descriptor_, &Class::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Enumeration_descriptor_, &Enumeration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnumerationValue_descriptor_, &EnumerationValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      List_descriptor_, &List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Dictionary_descriptor_, &Dictionary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DictionaryEntry_descriptor_, &DictionaryEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Set_descriptor_, &Set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tuple_descriptor_, &Tuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KRPC_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Argument::default_instance_;
  delete Argument_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete StreamMessage::default_instance_;
  delete StreamMessage_reflection_;
  delete StreamResponse::default_instance_;
  delete StreamResponse_reflection_;
  delete Services::default_instance_;
  delete Services_reflection_;
  delete Service::default_instance_;
  delete Service_reflection_;
  delete Procedure::default_instance_;
  delete Procedure_reflection_;
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete Class::default_instance_;
  delete Class_reflection_;
  delete Enumeration::default_instance_;
  delete Enumeration_reflection_;
  delete EnumerationValue::default_instance_;
  delete EnumerationValue_reflection_;
  delete List::default_instance_;
  delete List_reflection_;
  delete Dictionary::default_instance_;
  delete Dictionary_reflection_;
  delete DictionaryEntry::default_instance_;
  delete DictionaryEntry_reflection_;
  delete Set::default_instance_;
  delete Set_reflection_;
  delete Tuple::default_instance_;
  delete Tuple_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
}

void protobuf_AddDesc_KRPC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nKRPC.proto\022\004krpc\"P\n\007Request\022\017\n\007service"
    "\030\001 \002(\t\022\021\n\tprocedure\030\002 \002(\t\022!\n\targuments\030\003"
    " \003(\0132\016.krpc.Argument\"+\n\010Argument\022\020\n\010posi"
    "tion\030\001 \002(\r\022\r\n\005value\030\002 \002(\014\"=\n\010Response\022\014\n"
    "\004time\030\001 \002(\001\022\r\n\005error\030\002 \001(\t\022\024\n\014return_val"
    "ue\030\003 \001(\014\"8\n\rStreamMessage\022\'\n\tresponses\030\001"
    " \003(\0132\024.krpc.StreamResponse\">\n\016StreamResp"
    "onse\022\n\n\002id\030\001 \002(\r\022 \n\010response\030\002 \002(\0132\016.krp"
    "c.Response\"+\n\010Services\022\037\n\010services\030\001 \003(\013"
    "2\r.krpc.Service\"\203\001\n\007Service\022\014\n\004name\030\001 \002("
    "\t\022#\n\nprocedures\030\002 \003(\0132\017.krpc.Procedure\022\034"
    "\n\007classes\030\003 \003(\0132\013.krpc.Class\022\'\n\014enumerat"
    "ions\030\004 \003(\0132\021.krpc.Enumeration\"g\n\tProcedu"
    "re\022\014\n\004name\030\001 \002(\t\022#\n\nparameters\030\002 \003(\0132\017.k"
    "rpc.Parameter\022\023\n\013return_type\030\003 \001(\t\022\022\n\nat"
    "tributes\030\004 \003(\t\"A\n\tParameter\022\014\n\004name\030\001 \002("
    "\t\022\014\n\004type\030\002 \002(\t\022\030\n\020default_argument\030\003 \001("
    "\014\"\025\n\005Class\022\014\n\004name\030\001 \002(\t\"C\n\013Enumeration\022"
    "\014\n\004name\030\001 \002(\t\022&\n\006values\030\002 \003(\0132\026.krpc.Enu"
    "merationValue\"/\n\020EnumerationValue\022\014\n\004nam"
    "e\030\001 \002(\t\022\r\n\005value\030\002 \002(\005\"\025\n\004List\022\r\n\005items\030"
    "\001 \003(\014\"4\n\nDictionary\022&\n\007entries\030\001 \003(\0132\025.k"
    "rpc.DictionaryEntry\"-\n\017DictionaryEntry\022\013"
    "\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\"\024\n\003Set\022\r\n\005ite"
    "ms\030\001 \003(\014\"\026\n\005Tuple\022\r\n\005items\030\001 \003(\014\"\031\n\006Stat"
    "us\022\017\n\007version\030\001 \002(\t", 1019);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KRPC.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Argument::default_instance_ = new Argument();
  Response::default_instance_ = new Response();
  StreamMessage::default_instance_ = new StreamMessage();
  StreamResponse::default_instance_ = new StreamResponse();
  Services::default_instance_ = new Services();
  Service::default_instance_ = new Service();
  Procedure::default_instance_ = new Procedure();
  Parameter::default_instance_ = new Parameter();
  Class::default_instance_ = new Class();
  Enumeration::default_instance_ = new Enumeration();
  EnumerationValue::default_instance_ = new EnumerationValue();
  List::default_instance_ = new List();
  Dictionary::default_instance_ = new Dictionary();
  DictionaryEntry::default_instance_ = new DictionaryEntry();
  Set::default_instance_ = new Set();
  Tuple::default_instance_ = new Tuple();
  Status::default_instance_ = new Status();
  Request::default_instance_->InitAsDefaultInstance();
  Argument::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  StreamMessage::default_instance_->InitAsDefaultInstance();
  StreamResponse::default_instance_->InitAsDefaultInstance();
  Services::default_instance_->InitAsDefaultInstance();
  Service::default_instance_->InitAsDefaultInstance();
  Procedure::default_instance_->InitAsDefaultInstance();
  Parameter::default_instance_->InitAsDefaultInstance();
  Class::default_instance_->InitAsDefaultInstance();
  Enumeration::default_instance_->InitAsDefaultInstance();
  EnumerationValue::default_instance_->InitAsDefaultInstance();
  List::default_instance_->InitAsDefaultInstance();
  Dictionary::default_instance_->InitAsDefaultInstance();
  DictionaryEntry::default_instance_->InitAsDefaultInstance();
  Set::default_instance_->InitAsDefaultInstance();
  Tuple::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KRPC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KRPC_2eproto {
  StaticDescriptorInitializer_KRPC_2eproto() {
    protobuf_AddDesc_KRPC_2eproto();
  }
} static_descriptor_initializer_KRPC_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Request::kServiceFieldNumber;
const int Request::kProcedureFieldNumber;
const int Request::kArgumentsFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  procedure_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:krpc.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  procedure_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_service()) {
      service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_procedure()) {
      procedure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Request.service");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_procedure;
        break;
      }

      // required string procedure = 2;
      case 2: {
        if (tag == 18) {
         parse_procedure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_procedure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->procedure().data(), this->procedure().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Request.procedure");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arguments;
        break;
      }

      // repeated .krpc.Argument arguments = 3;
      case 3: {
        if (tag == 26) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arguments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Request)
  // required string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Request.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service(), output);
  }

  // required string procedure = 2;
  if (has_procedure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->procedure().data(), this->procedure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Request.procedure");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->procedure(), output);
  }

  // repeated .krpc.Argument arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arguments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Request)
  // required string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Request.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }

  // required string procedure = 2;
  if (has_procedure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->procedure().data(), this->procedure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Request.procedure");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->procedure(), target);
  }

  // repeated .krpc.Argument arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arguments(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Request)
  return target;
}

int Request::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_service()) {
    // required string service = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  if (has_procedure()) {
    // required string procedure = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->procedure());
  }

  return total_size;
}
int Request::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string service = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());

    // required string procedure = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->procedure());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .krpc.Argument arguments = 3;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_has_service();
      service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
    }
    if (from.has_procedure()) {
      set_has_procedure();
      procedure_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.procedure_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->arguments())) return false;
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  service_.Swap(&other->service_);
  procedure_.Swap(&other->procedure_);
  arguments_.UnsafeArenaSwap(&other->arguments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// required string service = 1;
 bool Request::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Request::set_has_service() {
  _has_bits_[0] |= 0x00000001u;
}
 void Request::clear_has_service() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Request::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service();
}
 const ::std::string& Request::service() const {
  // @@protoc_insertion_point(field_get:krpc.Request.service)
  return service_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_service(const ::std::string& value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Request.service)
}
 void Request::set_service(const char* value) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Request.service)
}
 void Request::set_service(const char* value, size_t size) {
  set_has_service();
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Request.service)
}
 ::std::string* Request::mutable_service() {
  set_has_service();
  // @@protoc_insertion_point(field_mutable:krpc.Request.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_service() {
  clear_has_service();
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    set_has_service();
  } else {
    clear_has_service();
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:krpc.Request.service)
}

// required string procedure = 2;
 bool Request::has_procedure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Request::set_has_procedure() {
  _has_bits_[0] |= 0x00000002u;
}
 void Request::clear_has_procedure() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Request::clear_procedure() {
  procedure_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_procedure();
}
 const ::std::string& Request::procedure() const {
  // @@protoc_insertion_point(field_get:krpc.Request.procedure)
  return procedure_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_procedure(const ::std::string& value) {
  set_has_procedure();
  procedure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Request.procedure)
}
 void Request::set_procedure(const char* value) {
  set_has_procedure();
  procedure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Request.procedure)
}
 void Request::set_procedure(const char* value, size_t size) {
  set_has_procedure();
  procedure_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Request.procedure)
}
 ::std::string* Request::mutable_procedure() {
  set_has_procedure();
  // @@protoc_insertion_point(field_mutable:krpc.Request.procedure)
  return procedure_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_procedure() {
  clear_has_procedure();
  return procedure_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_procedure(::std::string* procedure) {
  if (procedure != NULL) {
    set_has_procedure();
  } else {
    clear_has_procedure();
  }
  procedure_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), procedure);
  // @@protoc_insertion_point(field_set_allocated:krpc.Request.procedure)
}

// repeated .krpc.Argument arguments = 3;
 int Request::arguments_size() const {
  return arguments_.size();
}
 void Request::clear_arguments() {
  arguments_.Clear();
}
 const ::krpc::Argument& Request::arguments(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Request.arguments)
  return arguments_.Get(index);
}
 ::krpc::Argument* Request::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Request.arguments)
  return arguments_.Mutable(index);
}
 ::krpc::Argument* Request::add_arguments() {
  // @@protoc_insertion_point(field_add:krpc.Request.arguments)
  return arguments_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::Argument >&
Request::arguments() const {
  // @@protoc_insertion_point(field_list:krpc.Request.arguments)
  return arguments_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::Argument >*
Request::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Request.arguments)
  return &arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Argument::kPositionFieldNumber;
const int Argument::kValueFieldNumber;
#endif  // !_MSC_VER

Argument::Argument()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Argument)
}

void Argument::InitAsDefaultInstance() {
}

Argument::Argument(const Argument& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Argument)
}

void Argument::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  position_ = 0u;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Argument::~Argument() {
  // @@protoc_insertion_point(destructor:krpc.Argument)
  SharedDtor();
}

void Argument::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Argument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Argument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Argument_descriptor_;
}

const Argument& Argument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Argument* Argument::default_instance_ = NULL;

Argument* Argument::New(::google::protobuf::Arena* arena) const {
  Argument* n = new Argument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Argument::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    position_ = 0u;
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Argument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Argument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Argument)
  return false;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Argument)
  // required uint32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Argument)
}

::google::protobuf::uint8* Argument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Argument)
  // required uint32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Argument)
  return target;
}

int Argument::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_position()) {
    // required uint32 position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  return total_size;
}
int Argument::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());

    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Argument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Argument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Argument::MergeFrom(const Argument& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Argument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Argument::CopyFrom(const Argument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Argument::Swap(Argument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Argument::InternalSwap(Argument* other) {
  std::swap(position_, other->position_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Argument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Argument_descriptor_;
  metadata.reflection = Argument_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Argument

// required uint32 position = 1;
 bool Argument::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Argument::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
 void Argument::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Argument::clear_position() {
  position_ = 0u;
  clear_has_position();
}
 ::google::protobuf::uint32 Argument::position() const {
  // @@protoc_insertion_point(field_get:krpc.Argument.position)
  return position_;
}
 void Argument::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:krpc.Argument.position)
}

// required bytes value = 2;
 bool Argument::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Argument::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void Argument::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Argument::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Argument::value() const {
  // @@protoc_insertion_point(field_get:krpc.Argument.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Argument::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Argument.value)
}
 void Argument::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Argument.value)
}
 void Argument::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Argument.value)
}
 ::std::string* Argument::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:krpc.Argument.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Argument::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Argument::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:krpc.Argument.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Response::kTimeFieldNumber;
const int Response::kErrorFieldNumber;
const int Response::kReturnValueFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:krpc.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    time_ = 0;
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_return_value()) {
      return_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Response.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_return_value;
        break;
      }

      // optional bytes return_value = 3;
      case 3: {
        if (tag == 26) {
         parse_return_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_return_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Response)
  // required double time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional bytes return_value = 3;
  if (has_return_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->return_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Response)
  // required double time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional bytes return_value = 3;
  if (has_return_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->return_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  // required double time = 1;
  if (has_time()) {
    total_size += 1 + 8;
  }
  if (_has_bits_[1 / 32] & 6) {
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional bytes return_value = 3;
    if (has_return_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->return_value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (from.has_return_value()) {
      set_has_return_value();
      return_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.return_value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(time_, other->time_);
  error_.Swap(&other->error_);
  return_value_.Swap(&other->return_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// required double time = 1;
 bool Response::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Response::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
 void Response::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Response::clear_time() {
  time_ = 0;
  clear_has_time();
}
 double Response::time() const {
  // @@protoc_insertion_point(field_get:krpc.Response.time)
  return time_;
}
 void Response::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:krpc.Response.time)
}

// optional string error = 2;
 bool Response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
 void Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
 const ::std::string& Response::error() const {
  // @@protoc_insertion_point(field_get:krpc.Response.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Response.error)
}
 void Response::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Response.error)
}
 void Response::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Response.error)
}
 ::std::string* Response::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:krpc.Response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_error() {
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:krpc.Response.error)
}

// optional bytes return_value = 3;
 bool Response::has_return_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Response::set_has_return_value() {
  _has_bits_[0] |= 0x00000004u;
}
 void Response::clear_has_return_value() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Response::clear_return_value() {
  return_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_return_value();
}
 const ::std::string& Response::return_value() const {
  // @@protoc_insertion_point(field_get:krpc.Response.return_value)
  return return_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_return_value(const ::std::string& value) {
  set_has_return_value();
  return_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Response.return_value)
}
 void Response::set_return_value(const char* value) {
  set_has_return_value();
  return_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Response.return_value)
}
 void Response::set_return_value(const void* value, size_t size) {
  set_has_return_value();
  return_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Response.return_value)
}
 ::std::string* Response::mutable_return_value() {
  set_has_return_value();
  // @@protoc_insertion_point(field_mutable:krpc.Response.return_value)
  return return_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_return_value() {
  clear_has_return_value();
  return return_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_return_value(::std::string* return_value) {
  if (return_value != NULL) {
    set_has_return_value();
  } else {
    clear_has_return_value();
  }
  return_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_value);
  // @@protoc_insertion_point(field_set_allocated:krpc.Response.return_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StreamMessage::kResponsesFieldNumber;
#endif  // !_MSC_VER

StreamMessage::StreamMessage()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.StreamMessage)
}

void StreamMessage::InitAsDefaultInstance() {
}

StreamMessage::StreamMessage(const StreamMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.StreamMessage)
}

void StreamMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMessage::~StreamMessage() {
  // @@protoc_insertion_point(destructor:krpc.StreamMessage)
  SharedDtor();
}

void StreamMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMessage_descriptor_;
}

const StreamMessage& StreamMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

StreamMessage* StreamMessage::default_instance_ = NULL;

StreamMessage* StreamMessage::New(::google::protobuf::Arena* arena) const {
  StreamMessage* n = new StreamMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamMessage::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreamMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.StreamMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .krpc.StreamResponse responses = 1;
      case 1: {
        if (tag == 10) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.StreamMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.StreamMessage)
  return false;
#undef DO_
}

void StreamMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.StreamMessage)
  // repeated .krpc.StreamResponse responses = 1;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.StreamMessage)
}

::google::protobuf::uint8* StreamMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.StreamMessage)
  // repeated .krpc.StreamResponse responses = 1;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.StreamMessage)
  return target;
}

int StreamMessage::ByteSize() const {
  int total_size = 0;

  // repeated .krpc.StreamResponse responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StreamMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamMessage::MergeFrom(const StreamMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  responses_.MergeFrom(from.responses_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreamMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessage::CopyFrom(const StreamMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->responses())) return false;
  return true;
}

void StreamMessage::Swap(StreamMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamMessage::InternalSwap(StreamMessage* other) {
  responses_.UnsafeArenaSwap(&other->responses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMessage_descriptor_;
  metadata.reflection = StreamMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamMessage

// repeated .krpc.StreamResponse responses = 1;
 int StreamMessage::responses_size() const {
  return responses_.size();
}
 void StreamMessage::clear_responses() {
  responses_.Clear();
}
 const ::krpc::StreamResponse& StreamMessage::responses(int index) const {
  // @@protoc_insertion_point(field_get:krpc.StreamMessage.responses)
  return responses_.Get(index);
}
 ::krpc::StreamResponse* StreamMessage::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.StreamMessage.responses)
  return responses_.Mutable(index);
}
 ::krpc::StreamResponse* StreamMessage::add_responses() {
  // @@protoc_insertion_point(field_add:krpc.StreamMessage.responses)
  return responses_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::StreamResponse >&
StreamMessage::responses() const {
  // @@protoc_insertion_point(field_list:krpc.StreamMessage.responses)
  return responses_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::StreamResponse >*
StreamMessage::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:krpc.StreamMessage.responses)
  return &responses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StreamResponse::kIdFieldNumber;
const int StreamResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

StreamResponse::StreamResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.StreamResponse)
}

void StreamResponse::InitAsDefaultInstance() {
  response_ = const_cast< ::krpc::Response*>(&::krpc::Response::default_instance());
}

StreamResponse::StreamResponse(const StreamResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.StreamResponse)
}

void StreamResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamResponse::~StreamResponse() {
  // @@protoc_insertion_point(destructor:krpc.StreamResponse)
  SharedDtor();
}

void StreamResponse::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
  }
}

void StreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamResponse_descriptor_;
}

const StreamResponse& StreamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

StreamResponse* StreamResponse::default_instance_ = NULL;

StreamResponse* StreamResponse::New(::google::protobuf::Arena* arena) const {
  StreamResponse* n = new StreamResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_response()) {
      if (response_ != NULL) response_->::krpc::Response::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.StreamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // required .krpc.Response response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.StreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.StreamResponse)
  return false;
#undef DO_
}

void StreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.StreamResponse)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .krpc.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.StreamResponse)
}

::google::protobuf::uint8* StreamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.StreamResponse)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .krpc.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->response_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.StreamResponse)
  return target;
}

int StreamResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_response()) {
    // required .krpc.Response response = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  return total_size;
}
int StreamResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .krpc.Response response = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StreamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamResponse::MergeFrom(const StreamResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_response()) {
      mutable_response()->::krpc::Response::MergeFrom(from.response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamResponse::CopyFrom(const StreamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_response()) {
    if (!this->response_->IsInitialized()) return false;
  }
  return true;
}

void StreamResponse::Swap(StreamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamResponse::InternalSwap(StreamResponse* other) {
  std::swap(id_, other->id_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamResponse_descriptor_;
  metadata.reflection = StreamResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamResponse

// required uint32 id = 1;
 bool StreamResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void StreamResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
 void StreamResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
 void StreamResponse::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 StreamResponse::id() const {
  // @@protoc_insertion_point(field_get:krpc.StreamResponse.id)
  return id_;
}
 void StreamResponse::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:krpc.StreamResponse.id)
}

// required .krpc.Response response = 2;
 bool StreamResponse::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void StreamResponse::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
 void StreamResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
 void StreamResponse::clear_response() {
  if (response_ != NULL) response_->::krpc::Response::Clear();
  clear_has_response();
}
 const ::krpc::Response& StreamResponse::response() const {
  // @@protoc_insertion_point(field_get:krpc.StreamResponse.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
 ::krpc::Response* StreamResponse::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::krpc::Response;
  }
  // @@protoc_insertion_point(field_mutable:krpc.StreamResponse.response)
  return response_;
}
 ::krpc::Response* StreamResponse::release_response() {
  clear_has_response();
  ::krpc::Response* temp = response_;
  response_ = NULL;
  return temp;
}
 void StreamResponse::set_allocated_response(::krpc::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:krpc.StreamResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Services::kServicesFieldNumber;
#endif  // !_MSC_VER

Services::Services()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Services)
}

void Services::InitAsDefaultInstance() {
}

Services::Services(const Services& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Services)
}

void Services::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Services::~Services() {
  // @@protoc_insertion_point(destructor:krpc.Services)
  SharedDtor();
}

void Services::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Services::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Services::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Services_descriptor_;
}

const Services& Services::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Services* Services::default_instance_ = NULL;

Services* Services::New(::google::protobuf::Arena* arena) const {
  Services* n = new Services;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Services::Clear() {
  services_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Services::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Services)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .krpc.Service services = 1;
      case 1: {
        if (tag == 10) {
         parse_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_services;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Services)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Services)
  return false;
#undef DO_
}

void Services::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Services)
  // repeated .krpc.Service services = 1;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->services(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Services)
}

::google::protobuf::uint8* Services::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Services)
  // repeated .krpc.Service services = 1;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->services(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Services)
  return target;
}

int Services::ByteSize() const {
  int total_size = 0;

  // repeated .krpc.Service services = 1;
  total_size += 1 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->services(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Services::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Services* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Services*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Services::MergeFrom(const Services& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  services_.MergeFrom(from.services_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Services::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Services::CopyFrom(const Services& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->services())) return false;
  return true;
}

void Services::Swap(Services* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Services::InternalSwap(Services* other) {
  services_.UnsafeArenaSwap(&other->services_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Services::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Services_descriptor_;
  metadata.reflection = Services_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Services

// repeated .krpc.Service services = 1;
 int Services::services_size() const {
  return services_.size();
}
 void Services::clear_services() {
  services_.Clear();
}
 const ::krpc::Service& Services::services(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Services.services)
  return services_.Get(index);
}
 ::krpc::Service* Services::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Services.services)
  return services_.Mutable(index);
}
 ::krpc::Service* Services::add_services() {
  // @@protoc_insertion_point(field_add:krpc.Services.services)
  return services_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::Service >&
Services::services() const {
  // @@protoc_insertion_point(field_list:krpc.Services.services)
  return services_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::Service >*
Services::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Services.services)
  return &services_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Service::kNameFieldNumber;
const int Service::kProceduresFieldNumber;
const int Service::kClassesFieldNumber;
const int Service::kEnumerationsFieldNumber;
#endif  // !_MSC_VER

Service::Service()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Service)
}

void Service::InitAsDefaultInstance() {
}

Service::Service(const Service& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Service)
}

void Service::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:krpc.Service)
  SharedDtor();
}

void Service::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

const Service& Service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Service* Service::default_instance_ = NULL;

Service* Service::New(::google::protobuf::Arena* arena) const {
  Service* n = new Service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Service::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  procedures_.Clear();
  classes_.Clear();
  enumerations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Service.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_procedures;
        break;
      }

      // repeated .krpc.Procedure procedures = 2;
      case 2: {
        if (tag == 18) {
         parse_procedures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_procedures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_procedures;
        if (input->ExpectTag(26)) goto parse_classes;
        break;
      }

      // repeated .krpc.Class classes = 3;
      case 3: {
        if (tag == 26) {
         parse_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classes;
        if (input->ExpectTag(34)) goto parse_enumerations;
        break;
      }

      // repeated .krpc.Enumeration enumerations = 4;
      case 4: {
        if (tag == 34) {
         parse_enumerations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enumerations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_enumerations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Service)
  return false;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Service)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Service.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .krpc.Procedure procedures = 2;
  for (unsigned int i = 0, n = this->procedures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->procedures(i), output);
  }

  // repeated .krpc.Class classes = 3;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->classes(i), output);
  }

  // repeated .krpc.Enumeration enumerations = 4;
  for (unsigned int i = 0, n = this->enumerations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enumerations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Service)
}

::google::protobuf::uint8* Service::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Service)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Service.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .krpc.Procedure procedures = 2;
  for (unsigned int i = 0, n = this->procedures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->procedures(i), target);
  }

  // repeated .krpc.Class classes = 3;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->classes(i), target);
  }

  // repeated .krpc.Enumeration enumerations = 4;
  for (unsigned int i = 0, n = this->enumerations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enumerations(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Service)
  return target;
}

int Service::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .krpc.Procedure procedures = 2;
  total_size += 1 * this->procedures_size();
  for (int i = 0; i < this->procedures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->procedures(i));
  }

  // repeated .krpc.Class classes = 3;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes(i));
  }

  // repeated .krpc.Enumeration enumerations = 4;
  total_size += 1 * this->enumerations_size();
  for (int i = 0; i < this->enumerations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enumerations(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Service* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Service*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  procedures_.MergeFrom(from.procedures_);
  classes_.MergeFrom(from.classes_);
  enumerations_.MergeFrom(from.enumerations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Service::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->procedures())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->classes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->enumerations())) return false;
  return true;
}

void Service::Swap(Service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Service::InternalSwap(Service* other) {
  name_.Swap(&other->name_);
  procedures_.UnsafeArenaSwap(&other->procedures_);
  classes_.UnsafeArenaSwap(&other->classes_);
  enumerations_.UnsafeArenaSwap(&other->enumerations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_descriptor_;
  metadata.reflection = Service_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Service

// required string name = 1;
 bool Service::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Service::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Service::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Service::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Service::name() const {
  // @@protoc_insertion_point(field_get:krpc.Service.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Service.name)
}
 void Service::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Service.name)
}
 void Service::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Service.name)
}
 ::std::string* Service::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:krpc.Service.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Service::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.Service.name)
}

// repeated .krpc.Procedure procedures = 2;
 int Service::procedures_size() const {
  return procedures_.size();
}
 void Service::clear_procedures() {
  procedures_.Clear();
}
 const ::krpc::Procedure& Service::procedures(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Service.procedures)
  return procedures_.Get(index);
}
 ::krpc::Procedure* Service::mutable_procedures(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Service.procedures)
  return procedures_.Mutable(index);
}
 ::krpc::Procedure* Service::add_procedures() {
  // @@protoc_insertion_point(field_add:krpc.Service.procedures)
  return procedures_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::Procedure >&
Service::procedures() const {
  // @@protoc_insertion_point(field_list:krpc.Service.procedures)
  return procedures_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::Procedure >*
Service::mutable_procedures() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Service.procedures)
  return &procedures_;
}

// repeated .krpc.Class classes = 3;
 int Service::classes_size() const {
  return classes_.size();
}
 void Service::clear_classes() {
  classes_.Clear();
}
 const ::krpc::Class& Service::classes(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Service.classes)
  return classes_.Get(index);
}
 ::krpc::Class* Service::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Service.classes)
  return classes_.Mutable(index);
}
 ::krpc::Class* Service::add_classes() {
  // @@protoc_insertion_point(field_add:krpc.Service.classes)
  return classes_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::Class >&
Service::classes() const {
  // @@protoc_insertion_point(field_list:krpc.Service.classes)
  return classes_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::Class >*
Service::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Service.classes)
  return &classes_;
}

// repeated .krpc.Enumeration enumerations = 4;
 int Service::enumerations_size() const {
  return enumerations_.size();
}
 void Service::clear_enumerations() {
  enumerations_.Clear();
}
 const ::krpc::Enumeration& Service::enumerations(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Service.enumerations)
  return enumerations_.Get(index);
}
 ::krpc::Enumeration* Service::mutable_enumerations(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Service.enumerations)
  return enumerations_.Mutable(index);
}
 ::krpc::Enumeration* Service::add_enumerations() {
  // @@protoc_insertion_point(field_add:krpc.Service.enumerations)
  return enumerations_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::Enumeration >&
Service::enumerations() const {
  // @@protoc_insertion_point(field_list:krpc.Service.enumerations)
  return enumerations_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::Enumeration >*
Service::mutable_enumerations() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Service.enumerations)
  return &enumerations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Procedure::kNameFieldNumber;
const int Procedure::kParametersFieldNumber;
const int Procedure::kReturnTypeFieldNumber;
const int Procedure::kAttributesFieldNumber;
#endif  // !_MSC_VER

Procedure::Procedure()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Procedure)
}

void Procedure::InitAsDefaultInstance() {
}

Procedure::Procedure(const Procedure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Procedure)
}

void Procedure::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Procedure::~Procedure() {
  // @@protoc_insertion_point(destructor:krpc.Procedure)
  SharedDtor();
}

void Procedure::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Procedure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Procedure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Procedure_descriptor_;
}

const Procedure& Procedure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Procedure* Procedure::default_instance_ = NULL;

Procedure* Procedure::New(::google::protobuf::Arena* arena) const {
  Procedure* n = new Procedure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Procedure::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_return_type()) {
      return_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  parameters_.Clear();
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Procedure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Procedure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Procedure.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parameters;
        break;
      }

      // repeated .krpc.Parameter parameters = 2;
      case 2: {
        if (tag == 18) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parameters;
        if (input->ExpectTag(26)) goto parse_return_type;
        break;
      }

      // optional string return_type = 3;
      case 3: {
        if (tag == 26) {
         parse_return_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->return_type().data(), this->return_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Procedure.return_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attributes;
        break;
      }

      // repeated string attributes = 4;
      case 4: {
        if (tag == 34) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attributes(this->attributes_size() - 1).data(),
            this->attributes(this->attributes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Procedure.attributes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attributes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Procedure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Procedure)
  return false;
#undef DO_
}

void Procedure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Procedure)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Procedure.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .krpc.Parameter parameters = 2;
  for (unsigned int i = 0, n = this->parameters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parameters(i), output);
  }

  // optional string return_type = 3;
  if (has_return_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->return_type().data(), this->return_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Procedure.return_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->return_type(), output);
  }

  // repeated string attributes = 4;
  for (int i = 0; i < this->attributes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->attributes(i).data(), this->attributes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "krpc.Procedure.attributes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attributes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Procedure)
}

::google::protobuf::uint8* Procedure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Procedure)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Procedure.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .krpc.Parameter parameters = 2;
  for (unsigned int i = 0, n = this->parameters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parameters(i), target);
  }

  // optional string return_type = 3;
  if (has_return_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->return_type().data(), this->return_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Procedure.return_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->return_type(), target);
  }

  // repeated string attributes = 4;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attributes(i).data(), this->attributes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Procedure.attributes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->attributes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Procedure)
  return target;
}

int Procedure::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional string return_type = 3;
  if (has_return_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->return_type());
  }

  // repeated .krpc.Parameter parameters = 2;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  // repeated string attributes = 4;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attributes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Procedure::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Procedure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Procedure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Procedure::MergeFrom(const Procedure& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  parameters_.MergeFrom(from.parameters_);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_return_type()) {
      set_has_return_type();
      return_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.return_type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Procedure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Procedure::CopyFrom(const Procedure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Procedure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->parameters())) return false;
  return true;
}

void Procedure::Swap(Procedure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Procedure::InternalSwap(Procedure* other) {
  name_.Swap(&other->name_);
  parameters_.UnsafeArenaSwap(&other->parameters_);
  return_type_.Swap(&other->return_type_);
  attributes_.UnsafeArenaSwap(&other->attributes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Procedure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Procedure_descriptor_;
  metadata.reflection = Procedure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Procedure

// required string name = 1;
 bool Procedure::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Procedure::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Procedure::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Procedure::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Procedure::name() const {
  // @@protoc_insertion_point(field_get:krpc.Procedure.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Procedure::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Procedure.name)
}
 void Procedure::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Procedure.name)
}
 void Procedure::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Procedure.name)
}
 ::std::string* Procedure::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:krpc.Procedure.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Procedure::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Procedure::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.Procedure.name)
}

// repeated .krpc.Parameter parameters = 2;
 int Procedure::parameters_size() const {
  return parameters_.size();
}
 void Procedure::clear_parameters() {
  parameters_.Clear();
}
 const ::krpc::Parameter& Procedure::parameters(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Procedure.parameters)
  return parameters_.Get(index);
}
 ::krpc::Parameter* Procedure::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Procedure.parameters)
  return parameters_.Mutable(index);
}
 ::krpc::Parameter* Procedure::add_parameters() {
  // @@protoc_insertion_point(field_add:krpc.Procedure.parameters)
  return parameters_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::Parameter >&
Procedure::parameters() const {
  // @@protoc_insertion_point(field_list:krpc.Procedure.parameters)
  return parameters_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::Parameter >*
Procedure::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Procedure.parameters)
  return &parameters_;
}

// optional string return_type = 3;
 bool Procedure::has_return_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Procedure::set_has_return_type() {
  _has_bits_[0] |= 0x00000004u;
}
 void Procedure::clear_has_return_type() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Procedure::clear_return_type() {
  return_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_return_type();
}
 const ::std::string& Procedure::return_type() const {
  // @@protoc_insertion_point(field_get:krpc.Procedure.return_type)
  return return_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Procedure::set_return_type(const ::std::string& value) {
  set_has_return_type();
  return_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Procedure.return_type)
}
 void Procedure::set_return_type(const char* value) {
  set_has_return_type();
  return_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Procedure.return_type)
}
 void Procedure::set_return_type(const char* value, size_t size) {
  set_has_return_type();
  return_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Procedure.return_type)
}
 ::std::string* Procedure::mutable_return_type() {
  set_has_return_type();
  // @@protoc_insertion_point(field_mutable:krpc.Procedure.return_type)
  return return_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Procedure::release_return_type() {
  clear_has_return_type();
  return return_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Procedure::set_allocated_return_type(::std::string* return_type) {
  if (return_type != NULL) {
    set_has_return_type();
  } else {
    clear_has_return_type();
  }
  return_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_type);
  // @@protoc_insertion_point(field_set_allocated:krpc.Procedure.return_type)
}

// repeated string attributes = 4;
 int Procedure::attributes_size() const {
  return attributes_.size();
}
 void Procedure::clear_attributes() {
  attributes_.Clear();
}
 const ::std::string& Procedure::attributes(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Procedure.attributes)
  return attributes_.Get(index);
}
 ::std::string* Procedure::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Procedure.attributes)
  return attributes_.Mutable(index);
}
 void Procedure::set_attributes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:krpc.Procedure.attributes)
  attributes_.Mutable(index)->assign(value);
}
 void Procedure::set_attributes(int index, const char* value) {
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:krpc.Procedure.attributes)
}
 void Procedure::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:krpc.Procedure.attributes)
}
 ::std::string* Procedure::add_attributes() {
  return attributes_.Add();
}
 void Procedure::add_attributes(const ::std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:krpc.Procedure.attributes)
}
 void Procedure::add_attributes(const char* value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:krpc.Procedure.attributes)
}
 void Procedure::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:krpc.Procedure.attributes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Procedure::attributes() const {
  // @@protoc_insertion_point(field_list:krpc.Procedure.attributes)
  return attributes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Procedure::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Procedure.attributes)
  return &attributes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Parameter::kNameFieldNumber;
const int Parameter::kTypeFieldNumber;
const int Parameter::kDefaultArgumentFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Parameter)
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Parameter)
}

void Parameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_argument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:krpc.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_argument_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New(::google::protobuf::Arena* arena) const {
  Parameter* n = new Parameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Parameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_default_argument()) {
      default_argument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Parameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Parameter.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Parameter.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_default_argument;
        break;
      }

      // optional bytes default_argument = 3;
      case 3: {
        if (tag == 26) {
         parse_default_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_default_argument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Parameter)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Parameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Parameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional bytes default_argument = 3;
  if (has_default_argument()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->default_argument(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Parameter)
}

::google::protobuf::uint8* Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Parameter)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Parameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Parameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional bytes default_argument = 3;
  if (has_default_argument()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->default_argument(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Parameter)
  return target;
}

int Parameter::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
int Parameter::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes default_argument = 3;
  if (has_default_argument()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->default_argument());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_default_argument()) {
      set_has_default_argument();
      default_argument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_argument_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameter::InternalSwap(Parameter* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  default_argument_.Swap(&other->default_argument_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Parameter

// required string name = 1;
 bool Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Parameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Parameter::name() const {
  // @@protoc_insertion_point(field_get:krpc.Parameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Parameter.name)
}
 void Parameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Parameter.name)
}
 void Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Parameter.name)
}
 ::std::string* Parameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:krpc.Parameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Parameter::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.Parameter.name)
}

// required string type = 2;
 bool Parameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Parameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
 void Parameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Parameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Parameter::type() const {
  // @@protoc_insertion_point(field_get:krpc.Parameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Parameter.type)
}
 void Parameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Parameter.type)
}
 void Parameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Parameter.type)
}
 ::std::string* Parameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:krpc.Parameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Parameter::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:krpc.Parameter.type)
}

// optional bytes default_argument = 3;
 bool Parameter::has_default_argument() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Parameter::set_has_default_argument() {
  _has_bits_[0] |= 0x00000004u;
}
 void Parameter::clear_has_default_argument() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Parameter::clear_default_argument() {
  default_argument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_argument();
}
 const ::std::string& Parameter::default_argument() const {
  // @@protoc_insertion_point(field_get:krpc.Parameter.default_argument)
  return default_argument_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_default_argument(const ::std::string& value) {
  set_has_default_argument();
  default_argument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Parameter.default_argument)
}
 void Parameter::set_default_argument(const char* value) {
  set_has_default_argument();
  default_argument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Parameter.default_argument)
}
 void Parameter::set_default_argument(const void* value, size_t size) {
  set_has_default_argument();
  default_argument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Parameter.default_argument)
}
 ::std::string* Parameter::mutable_default_argument() {
  set_has_default_argument();
  // @@protoc_insertion_point(field_mutable:krpc.Parameter.default_argument)
  return default_argument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Parameter::release_default_argument() {
  clear_has_default_argument();
  return default_argument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_allocated_default_argument(::std::string* default_argument) {
  if (default_argument != NULL) {
    set_has_default_argument();
  } else {
    clear_has_default_argument();
  }
  default_argument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_argument);
  // @@protoc_insertion_point(field_set_allocated:krpc.Parameter.default_argument)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Class::kNameFieldNumber;
#endif  // !_MSC_VER

Class::Class()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Class)
}

void Class::InitAsDefaultInstance() {
}

Class::Class(const Class& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Class)
}

void Class::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Class::~Class() {
  // @@protoc_insertion_point(destructor:krpc.Class)
  SharedDtor();
}

void Class::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Class::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Class::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Class_descriptor_;
}

const Class& Class::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Class* Class::default_instance_ = NULL;

Class* Class::New(::google::protobuf::Arena* arena) const {
  Class* n = new Class;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Class::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Class::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Class)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Class.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Class)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Class)
  return false;
#undef DO_
}

void Class::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Class)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Class.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Class)
}

::google::protobuf::uint8* Class::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Class)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Class.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Class)
  return target;
}

int Class::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Class::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Class* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Class*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Class::MergeFrom(const Class& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Class::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Class::CopyFrom(const Class& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Class::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Class::Swap(Class* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Class::InternalSwap(Class* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Class::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Class_descriptor_;
  metadata.reflection = Class_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Class

// required string name = 1;
 bool Class::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Class::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Class::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Class::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Class::name() const {
  // @@protoc_insertion_point(field_get:krpc.Class.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Class::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Class.name)
}
 void Class::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Class.name)
}
 void Class::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Class.name)
}
 ::std::string* Class::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:krpc.Class.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Class::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Class::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.Class.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Enumeration::kNameFieldNumber;
const int Enumeration::kValuesFieldNumber;
#endif  // !_MSC_VER

Enumeration::Enumeration()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Enumeration)
}

void Enumeration::InitAsDefaultInstance() {
}

Enumeration::Enumeration(const Enumeration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Enumeration)
}

void Enumeration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Enumeration::~Enumeration() {
  // @@protoc_insertion_point(destructor:krpc.Enumeration)
  SharedDtor();
}

void Enumeration::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Enumeration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Enumeration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Enumeration_descriptor_;
}

const Enumeration& Enumeration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Enumeration* Enumeration::default_instance_ = NULL;

Enumeration* Enumeration::New(::google::protobuf::Arena* arena) const {
  Enumeration* n = new Enumeration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Enumeration::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Enumeration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Enumeration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Enumeration.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .krpc.EnumerationValue values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Enumeration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Enumeration)
  return false;
#undef DO_
}

void Enumeration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Enumeration)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Enumeration.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .krpc.EnumerationValue values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Enumeration)
}

::google::protobuf::uint8* Enumeration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Enumeration)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Enumeration.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .krpc.EnumerationValue values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Enumeration)
  return target;
}

int Enumeration::ByteSize() const {
  int total_size = 0;

  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .krpc.EnumerationValue values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Enumeration::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Enumeration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Enumeration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Enumeration::MergeFrom(const Enumeration& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Enumeration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enumeration::CopyFrom(const Enumeration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enumeration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void Enumeration::Swap(Enumeration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Enumeration::InternalSwap(Enumeration* other) {
  name_.Swap(&other->name_);
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Enumeration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Enumeration_descriptor_;
  metadata.reflection = Enumeration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Enumeration

// required string name = 1;
 bool Enumeration::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Enumeration::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void Enumeration::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Enumeration::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Enumeration::name() const {
  // @@protoc_insertion_point(field_get:krpc.Enumeration.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Enumeration::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Enumeration.name)
}
 void Enumeration::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Enumeration.name)
}
 void Enumeration::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Enumeration.name)
}
 ::std::string* Enumeration::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:krpc.Enumeration.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Enumeration::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Enumeration::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.Enumeration.name)
}

// repeated .krpc.EnumerationValue values = 2;
 int Enumeration::values_size() const {
  return values_.size();
}
 void Enumeration::clear_values() {
  values_.Clear();
}
 const ::krpc::EnumerationValue& Enumeration::values(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Enumeration.values)
  return values_.Get(index);
}
 ::krpc::EnumerationValue* Enumeration::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Enumeration.values)
  return values_.Mutable(index);
}
 ::krpc::EnumerationValue* Enumeration::add_values() {
  // @@protoc_insertion_point(field_add:krpc.Enumeration.values)
  return values_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::EnumerationValue >&
Enumeration::values() const {
  // @@protoc_insertion_point(field_list:krpc.Enumeration.values)
  return values_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::EnumerationValue >*
Enumeration::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Enumeration.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int EnumerationValue::kNameFieldNumber;
const int EnumerationValue::kValueFieldNumber;
#endif  // !_MSC_VER

EnumerationValue::EnumerationValue()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.EnumerationValue)
}

void EnumerationValue::InitAsDefaultInstance() {
}

EnumerationValue::EnumerationValue(const EnumerationValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.EnumerationValue)
}

void EnumerationValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnumerationValue::~EnumerationValue() {
  // @@protoc_insertion_point(destructor:krpc.EnumerationValue)
  SharedDtor();
}

void EnumerationValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EnumerationValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnumerationValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumerationValue_descriptor_;
}

const EnumerationValue& EnumerationValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

EnumerationValue* EnumerationValue::default_instance_ = NULL;

EnumerationValue* EnumerationValue::New(::google::protobuf::Arena* arena) const {
  EnumerationValue* n = new EnumerationValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnumerationValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnumerationValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.EnumerationValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.EnumerationValue.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.EnumerationValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.EnumerationValue)
  return false;
#undef DO_
}

void EnumerationValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.EnumerationValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.EnumerationValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.EnumerationValue)
}

::google::protobuf::uint8* EnumerationValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.EnumerationValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.EnumerationValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.EnumerationValue)
  return target;
}

int EnumerationValue::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
int EnumerationValue::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumerationValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnumerationValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnumerationValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnumerationValue::MergeFrom(const EnumerationValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnumerationValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumerationValue::CopyFrom(const EnumerationValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumerationValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnumerationValue::Swap(EnumerationValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumerationValue::InternalSwap(EnumerationValue* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnumerationValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnumerationValue_descriptor_;
  metadata.reflection = EnumerationValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnumerationValue

// required string name = 1;
 bool EnumerationValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void EnumerationValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void EnumerationValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void EnumerationValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& EnumerationValue::name() const {
  // @@protoc_insertion_point(field_get:krpc.EnumerationValue.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnumerationValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.EnumerationValue.name)
}
 void EnumerationValue::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.EnumerationValue.name)
}
 void EnumerationValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.EnumerationValue.name)
}
 ::std::string* EnumerationValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:krpc.EnumerationValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnumerationValue::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnumerationValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:krpc.EnumerationValue.name)
}

// required int32 value = 2;
 bool EnumerationValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void EnumerationValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void EnumerationValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void EnumerationValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
 ::google::protobuf::int32 EnumerationValue::value() const {
  // @@protoc_insertion_point(field_get:krpc.EnumerationValue.value)
  return value_;
}
 void EnumerationValue::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:krpc.EnumerationValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int List::kItemsFieldNumber;
#endif  // !_MSC_VER

List::List()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.List)
}

void List::InitAsDefaultInstance() {
}

List::List(const List& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.List)
}

void List::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

List::~List() {
  // @@protoc_insertion_point(destructor:krpc.List)
  SharedDtor();
}

void List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return List_descriptor_;
}

const List& List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

List* List::default_instance_ = NULL;

List* List::New(::google::protobuf::Arena* arena) const {
  List* n = new List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void List::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.List)
  return false;
#undef DO_
}

void List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.List)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.List)
}

::google::protobuf::uint8* List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.List)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->items(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.List)
  return target;
}

int List::ByteSize() const {
  int total_size = 0;

  // repeated bytes items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void List::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void List::MergeFrom(const List& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void List::CopyFrom(const List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {

  return true;
}

void List::Swap(List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void List::InternalSwap(List* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = List_descriptor_;
  metadata.reflection = List_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// List

// repeated bytes items = 1;
 int List::items_size() const {
  return items_.size();
}
 void List::clear_items() {
  items_.Clear();
}
 const ::std::string& List::items(int index) const {
  // @@protoc_insertion_point(field_get:krpc.List.items)
  return items_.Get(index);
}
 ::std::string* List::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.List.items)
  return items_.Mutable(index);
}
 void List::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:krpc.List.items)
  items_.Mutable(index)->assign(value);
}
 void List::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:krpc.List.items)
}
 void List::set_items(int index, const void* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:krpc.List.items)
}
 ::std::string* List::add_items() {
  return items_.Add();
}
 void List::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:krpc.List.items)
}
 void List::add_items(const char* value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:krpc.List.items)
}
 void List::add_items(const void* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:krpc.List.items)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
List::items() const {
  // @@protoc_insertion_point(field_list:krpc.List.items)
  return items_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
List::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:krpc.List.items)
  return &items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Dictionary::kEntriesFieldNumber;
#endif  // !_MSC_VER

Dictionary::Dictionary()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Dictionary)
}

void Dictionary::InitAsDefaultInstance() {
}

Dictionary::Dictionary(const Dictionary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Dictionary)
}

void Dictionary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dictionary::~Dictionary() {
  // @@protoc_insertion_point(destructor:krpc.Dictionary)
  SharedDtor();
}

void Dictionary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dictionary_descriptor_;
}

const Dictionary& Dictionary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Dictionary* Dictionary::default_instance_ = NULL;

Dictionary* Dictionary::New(::google::protobuf::Arena* arena) const {
  Dictionary* n = new Dictionary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dictionary::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Dictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Dictionary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .krpc.DictionaryEntry entries = 1;
      case 1: {
        if (tag == 10) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Dictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Dictionary)
  return false;
#undef DO_
}

void Dictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Dictionary)
  // repeated .krpc.DictionaryEntry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Dictionary)
}

::google::protobuf::uint8* Dictionary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Dictionary)
  // repeated .krpc.DictionaryEntry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Dictionary)
  return target;
}

int Dictionary::ByteSize() const {
  int total_size = 0;

  // repeated .krpc.DictionaryEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dictionary::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Dictionary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dictionary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dictionary::MergeFrom(const Dictionary& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entries_.MergeFrom(from.entries_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Dictionary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dictionary::CopyFrom(const Dictionary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dictionary::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void Dictionary::Swap(Dictionary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dictionary::InternalSwap(Dictionary* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dictionary_descriptor_;
  metadata.reflection = Dictionary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dictionary

// repeated .krpc.DictionaryEntry entries = 1;
 int Dictionary::entries_size() const {
  return entries_.size();
}
 void Dictionary::clear_entries() {
  entries_.Clear();
}
 const ::krpc::DictionaryEntry& Dictionary::entries(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Dictionary.entries)
  return entries_.Get(index);
}
 ::krpc::DictionaryEntry* Dictionary::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Dictionary.entries)
  return entries_.Mutable(index);
}
 ::krpc::DictionaryEntry* Dictionary::add_entries() {
  // @@protoc_insertion_point(field_add:krpc.Dictionary.entries)
  return entries_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::krpc::DictionaryEntry >&
Dictionary::entries() const {
  // @@protoc_insertion_point(field_list:krpc.Dictionary.entries)
  return entries_;
}
 ::google::protobuf::RepeatedPtrField< ::krpc::DictionaryEntry >*
Dictionary::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Dictionary.entries)
  return &entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DictionaryEntry::kKeyFieldNumber;
const int DictionaryEntry::kValueFieldNumber;
#endif  // !_MSC_VER

DictionaryEntry::DictionaryEntry()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.DictionaryEntry)
}

void DictionaryEntry::InitAsDefaultInstance() {
}

DictionaryEntry::DictionaryEntry(const DictionaryEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.DictionaryEntry)
}

void DictionaryEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DictionaryEntry::~DictionaryEntry() {
  // @@protoc_insertion_point(destructor:krpc.DictionaryEntry)
  SharedDtor();
}

void DictionaryEntry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DictionaryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictionaryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryEntry_descriptor_;
}

const DictionaryEntry& DictionaryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

DictionaryEntry* DictionaryEntry::default_instance_ = NULL;

DictionaryEntry* DictionaryEntry::New(::google::protobuf::Arena* arena) const {
  DictionaryEntry* n = new DictionaryEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictionaryEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DictionaryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.DictionaryEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.DictionaryEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.DictionaryEntry)
  return false;
#undef DO_
}

void DictionaryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.DictionaryEntry)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.DictionaryEntry)
}

::google::protobuf::uint8* DictionaryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.DictionaryEntry)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.DictionaryEntry)
  return target;
}

int DictionaryEntry::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  return total_size;
}
int DictionaryEntry::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DictionaryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DictionaryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DictionaryEntry::MergeFrom(const DictionaryEntry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DictionaryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryEntry::CopyFrom(const DictionaryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DictionaryEntry::Swap(DictionaryEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictionaryEntry::InternalSwap(DictionaryEntry* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DictionaryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictionaryEntry_descriptor_;
  metadata.reflection = DictionaryEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictionaryEntry

// required bytes key = 1;
 bool DictionaryEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void DictionaryEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
 void DictionaryEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
 void DictionaryEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& DictionaryEntry::key() const {
  // @@protoc_insertion_point(field_get:krpc.DictionaryEntry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DictionaryEntry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.DictionaryEntry.key)
}
 void DictionaryEntry::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.DictionaryEntry.key)
}
 void DictionaryEntry::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.DictionaryEntry.key)
}
 ::std::string* DictionaryEntry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:krpc.DictionaryEntry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DictionaryEntry::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DictionaryEntry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:krpc.DictionaryEntry.key)
}

// required bytes value = 2;
 bool DictionaryEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void DictionaryEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void DictionaryEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void DictionaryEntry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& DictionaryEntry::value() const {
  // @@protoc_insertion_point(field_get:krpc.DictionaryEntry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DictionaryEntry::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.DictionaryEntry.value)
}
 void DictionaryEntry::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.DictionaryEntry.value)
}
 void DictionaryEntry::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.DictionaryEntry.value)
}
 ::std::string* DictionaryEntry::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:krpc.DictionaryEntry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DictionaryEntry::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DictionaryEntry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:krpc.DictionaryEntry.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Set::kItemsFieldNumber;
#endif  // !_MSC_VER

Set::Set()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Set)
}

void Set::InitAsDefaultInstance() {
}

Set::Set(const Set& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Set)
}

void Set::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Set::~Set() {
  // @@protoc_insertion_point(destructor:krpc.Set)
  SharedDtor();
}

void Set::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Set_descriptor_;
}

const Set& Set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Set* Set::default_instance_ = NULL;

Set* Set::New(::google::protobuf::Arena* arena) const {
  Set* n = new Set;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Set::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Set)
  return false;
#undef DO_
}

void Set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Set)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Set)
}

::google::protobuf::uint8* Set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Set)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->items(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Set)
  return target;
}

int Set::ByteSize() const {
  int total_size = 0;

  // repeated bytes items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Set::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Set::MergeFrom(const Set& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Set::CopyFrom(const Set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Set::IsInitialized() const {

  return true;
}

void Set::Swap(Set* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Set::InternalSwap(Set* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Set_descriptor_;
  metadata.reflection = Set_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Set

// repeated bytes items = 1;
 int Set::items_size() const {
  return items_.size();
}
 void Set::clear_items() {
  items_.Clear();
}
 const ::std::string& Set::items(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Set.items)
  return items_.Get(index);
}
 ::std::string* Set::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Set.items)
  return items_.Mutable(index);
}
 void Set::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:krpc.Set.items)
  items_.Mutable(index)->assign(value);
}
 void Set::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:krpc.Set.items)
}
 void Set::set_items(int index, const void* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:krpc.Set.items)
}
 ::std::string* Set::add_items() {
  return items_.Add();
}
 void Set::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:krpc.Set.items)
}
 void Set::add_items(const char* value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:krpc.Set.items)
}
 void Set::add_items(const void* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:krpc.Set.items)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Set::items() const {
  // @@protoc_insertion_point(field_list:krpc.Set.items)
  return items_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Set::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Set.items)
  return &items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Tuple::kItemsFieldNumber;
#endif  // !_MSC_VER

Tuple::Tuple()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Tuple)
}

void Tuple::InitAsDefaultInstance() {
}

Tuple::Tuple(const Tuple& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Tuple)
}

void Tuple::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tuple::~Tuple() {
  // @@protoc_insertion_point(destructor:krpc.Tuple)
  SharedDtor();
}

void Tuple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tuple_descriptor_;
}

const Tuple& Tuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Tuple* Tuple::default_instance_ = NULL;

Tuple* Tuple::New(::google::protobuf::Arena* arena) const {
  Tuple* n = new Tuple;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tuple::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Tuple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Tuple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Tuple)
  return false;
#undef DO_
}

void Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Tuple)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Tuple)
}

::google::protobuf::uint8* Tuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Tuple)
  // repeated bytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->items(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Tuple)
  return target;
}

int Tuple::ByteSize() const {
  int total_size = 0;

  // repeated bytes items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tuple::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Tuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Tuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {

  return true;
}

void Tuple::Swap(Tuple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tuple::InternalSwap(Tuple* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tuple_descriptor_;
  metadata.reflection = Tuple_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tuple

// repeated bytes items = 1;
 int Tuple::items_size() const {
  return items_.size();
}
 void Tuple::clear_items() {
  items_.Clear();
}
 const ::std::string& Tuple::items(int index) const {
  // @@protoc_insertion_point(field_get:krpc.Tuple.items)
  return items_.Get(index);
}
 ::std::string* Tuple::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:krpc.Tuple.items)
  return items_.Mutable(index);
}
 void Tuple::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:krpc.Tuple.items)
  items_.Mutable(index)->assign(value);
}
 void Tuple::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:krpc.Tuple.items)
}
 void Tuple::set_items(int index, const void* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:krpc.Tuple.items)
}
 ::std::string* Tuple::add_items() {
  return items_.Add();
}
 void Tuple::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:krpc.Tuple.items)
}
 void Tuple::add_items(const char* value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:krpc.Tuple.items)
}
 void Tuple::add_items(const void* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:krpc.Tuple.items)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Tuple::items() const {
  // @@protoc_insertion_point(field_list:krpc.Tuple.items)
  return items_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Tuple::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:krpc.Tuple.items)
  return &items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Status::kVersionFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:krpc.Status)
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:krpc.Status)
}

void Status::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:krpc.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KRPC_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
  if (has_version()) {
    version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:krpc.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "krpc.Status.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:krpc.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:krpc.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:krpc.Status)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Status.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:krpc.Status)
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:krpc.Status)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "krpc.Status.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krpc.Status)
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  // required string version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  version_.Swap(&other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// required string version = 1;
 bool Status::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Status::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
 void Status::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Status::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& Status::version() const {
  // @@protoc_insertion_point(field_get:krpc.Status.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:krpc.Status.version)
}
 void Status::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:krpc.Status.version)
}
 void Status::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:krpc.Status.version)
}
 ::std::string* Status::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:krpc.Status.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_version() {
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:krpc.Status.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace krpc

// @@protoc_insertion_point(global_scope)
